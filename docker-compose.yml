services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    networks:
      - fraud-detection

  webserver:
    build: .
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__WEBSERVER__SECRET_KEY=mysecretkey
      - AIRFLOW__CORE__FERNET_KEY=GgyJ5jUehSy2zQqY958eUWW1ezEgNp4OerBy-AKuD14=
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
    ports:
      - "8080:8080"
    entrypoint: /airflow_init.sh
    command: webserver
    networks:
      - fraud-detection

  scheduler:
    build: .
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__WEBSERVER__SECRET_KEY=mysecretkey
      - AIRFLOW__CORE__FERNET_KEY=GgyJ5jUehSy2zQqY958eUWW1ezEgNp4OerBy-AKuD14=
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
    entrypoint: /airflow_init.sh
    command: scheduler
    networks:
      - fraud-detection
  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ':9001' --address ':9000'
    environment:
      - MINIO_ROOT_USER=${MINIO_USERNANME}
      - MINIO_ROOT_PASSWORD=${MINIO_PASSWORD}
    volumes:
      - minio_data:/data
    networks:
      - fraud-detection
  
  mlflow-server:
    build: ./mlflow
    image: mlflow-server
    container_name: mlflow-server
    depends_on:
      - mc
      - postgres
    environment:
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    command: mlflow server --port 5500 --host 0.0.0.0 --backend-store-uri postgresql+psycopg2://mlflow:mlflow@postgres/mlflow --default-artifact-root s3://mlflow
    networks:
      - fraud-detection

  producer:
    build: ./producer
    env_file: .env
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 6G
    networks:
      - fraud-detection

  kafka-connsumer:
    build:
      context: ./api
      dockerfile: Dockerfile
    command: python -m app.kafka_consumer
    env_file: .env
    depends_on:
      - postgres
    volumes:
      - ./models:/app/models
      - ./config.yaml:/app/config.yaml
      - ./.env:/app/.env
    networks:
      - fraud-detection
  inference:
    build: ./inference
    env_file: .env
    volumes:
      - ./models:/app/models
      - ./config.yaml:/app/config.yaml
      - ./env:/app/.env
    networks:
      - fraud-detection


networks:
  fraud-detection:
    driver: bridge