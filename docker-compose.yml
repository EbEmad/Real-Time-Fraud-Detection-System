version: '3.9'

services:
  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=INTERNAL://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_LOG_DIRS=/bitnami/kafka/data
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - real-time

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    ports:
      - "8085:8080"
    depends_on:
      - kafka
    networks:
      - real-time

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=frauddb
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./scripts/db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - real-time

  mlflow:
    build:
      context: ./services/mlflow
      dockerfile: Dockerfile
    container_name: mlflow
    environment:
      - BACKEND_STORE_URI=postgresql+psycopg2://admin:admin@postgres:5432/frauddb
      - ARTIFACT_ROOT=/mlflow/artifacts
    ports:
      - "5000:5000"
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
    depends_on:
      - postgres
    networks:
      - real-time

  fraud-service:
    build:
      context: ./services/fraud_service
      dockerfile: Dockerfile
    container_name: fraud-service
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC=transactions
      - POSTGRES_URI=postgresql+psycopg2://admin:admin@postgres:5432/frauddb
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MLFLOW_MODEL_NAME=fraud_detector
      - MLFLOW_MODEL_STAGE=Production
    ports:
      - "8000:8000"
    depends_on:
      - kafka
      - postgres
      - mlflow
    networks:
      - real-time

  producer:
    build:
      context: ./services/producer
      dockerfile: Dockerfile
    container_name: producer
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC=transactions
      - PRODUCE_RATE_PER_SEC=2
    depends_on:
      - kafka
    networks:
      - real-time

  airflow-init:
    build:
      context: ./services/airflow
      dockerfile: Dockerfile
    container_name: airflow-init
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://admin:admin@postgres:5432/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW_UID=50000
      - PYTHONWARNINGS=ignore
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
    depends_on:
      - postgres
    networks:
      - real-time
    command: bash -c "airflow db migrate && airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin || true"

  airflow-scheduler:
    build:
      context: ./services/airflow
      dockerfile: Dockerfile
    container_name: airflow-scheduler
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://admin:admin@postgres:5432/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - PYTHONWARNINGS=ignore
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - ./services/training/app:/opt/airflow/train_app:ro
    depends_on:
      - airflow-init
      - postgres
      - mlflow
    networks:
      - real-time
    command: ["airflow", "scheduler"]

  airflow-webserver:
    build:
      context: ./services/airflow
      dockerfile: Dockerfile
    container_name: airflow-webserver
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://admin:admin@postgres:5432/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__WEBSERVER__SECRET_KEY=supersecretkeychangeme
      - PYTHONWARNINGS=ignore
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
    depends_on:
      - airflow-init
      - postgres
    ports:
      - "8080:8080"
    
    networks:
      - real-time
    command: ["airflow", "webserver"]

  grafana:
    image: grafana/grafana:10.4.5
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - postgres
    networks:
      - real-time

volumes:
  kafka_data: {}
  pg_data: {}
  mlflow_artifacts: {}
  airflow_logs: {}
  grafana_data: {}
networks:
  real-time:
    driver: bridge